#compdef espsecure

# AUTOMATCALLY GENERATED by `shtab`


_shtab_espsecure_commands() {
  local _commands=(
    "decrypt_flash_data:"
    "digest_private_key:"
    "digest_rsa_public_key:"
    "digest_sbv2_public_key:"
    "digest_secure_bootloader:"
    "encrypt_flash_data:"
    "extract_public_key:"
    "generate_flash_encryption_key:"
    "generate_signing_key:"
    "sign_data:"
    "signature_info_v2:"
    "verify_signature:"
  )
  _describe 'espsecure commands' _commands
}

_shtab_espsecure_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_espsecure_decrypt_flash_data_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--aes_xts,-x}"[Decrypt data using AES-XTS as used on ESP32-S2, ESP32-C2, ESP32-C3 and ESP32-C6]"
  {--keyfile,-k}"[File with flash encryption key]:keyfile:"
  {--output,-o}"[Output file for plaintext data.]:output:"
  {--address,-a}"[Address offset in flash that file was read from.]:address:"
  "--flash_crypt_conf[Override FLASH_CRYPT_CONF efuse value (default is 0XF).]:flash_crypt_conf:"
  ":File with encrypted flash contents:"
)

_shtab_espsecure_digest_private_key_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--keyfile,-k}"[Private key file (PEM format) to generate a digest from.]:keyfile:"
  {--keylen,-l}"[Length of private key digest file to generate (in bits). 3\/4 Coding Scheme requires 192 bit key.]:keylen:(192 256)"
  ":File to write 32 byte digest into:"
)

_shtab_espsecure_digest_rsa_public_key_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--keyfile,-k}"[Public key file for verification. Can be private or public key in PEM format.]:keyfile:"
  {--output,-o}"[Output file for the digest.]:output:"
)

_shtab_espsecure_digest_sbv2_public_key_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--keyfile,-k}"[Public key file for verification. Can be private or public key in PEM format.]:keyfile:"
  {--output,-o}"[Output file for the digest.]:output:"
)

_shtab_espsecure_digest_secure_bootloader_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--keyfile,-k}"[256 bit key for secure boot digest.]:keyfile:"
  {--output,-o}"[Output file for signed digest image.]:output:"
  "--iv[128 byte IV file. Supply a file for testing purposes only, if not supplied an IV will be randomly generated.]:iv:"
  ":Bootloader image file to calculate digest from:"
)

_shtab_espsecure_encrypt_flash_data_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--aes_xts,-x}"[Encrypt data using AES-XTS as used on ESP32-S2, ESP32-C2, ESP32-C3 and ESP32-C6]"
  {--keyfile,-k}"[File with flash encryption key]:keyfile:"
  {--output,-o}"[Output file for encrypted data.]:output:"
  {--address,-a}"[Address offset in flash where file will be flashed.]:address:"
  "--flash_crypt_conf[Override FLASH_CRYPT_CONF efuse value (default is 0XF).]:flash_crypt_conf:"
  ":File with plaintext content for encrypting:"
)

_shtab_espsecure_extract_public_key_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--version,-v}"[Version of the secure boot signing scheme to use.]:version:(1 2)"
  {--keyfile,-k}"[Private key file (PEM format) to extract the public verification key from.]:keyfile:"
  ":File to save new public key into:"
)

_shtab_espsecure_generate_flash_encryption_key_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--keylen,-l}"[Length of private key digest file to generate (in bits). 3\/4 Coding Scheme requires 192 bit key.]:keylen:(128 192 256 512)"
  ":File to write 16, 24, 32 or 64 byte key into:"
)

_shtab_espsecure_generate_signing_key_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--version,-v}"[Version of the secure boot signing scheme to use.]:version:(1 2)"
  {--scheme,-s}"[Scheme of secure boot signing.]:scheme:(rsa3072 ecdsa192 ecdsa256)"
  ":Filename for private key file (embedded public key):"
)

_shtab_espsecure_sign_data_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--version,-v}"[Version of the secure boot signing scheme to use.]:version:(1 2)"
  {--keyfile,-k}"[Private key file for signing. Key is in PEM format.]:keyfile:"
  {--append_signatures,-a}"[Append signature block(s) to already signed imageValid only for ESP32-S2.]"
  {--output,-o}"[Output file for signed digest image. Default is to sign the input file.]:output:"
  ":File to sign. For version 1, this can be any file. For version 2, this must be a valid app image.:"
)

_shtab_espsecure_signature_info_v2_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  ":Secure boot v2 signed data file.:"
)

_shtab_espsecure_verify_signature_options=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--version,-v}"[Version of the secure boot scheme to use.]:version:(1 2)"
  {--keyfile,-k}"[Public key file for verification. Can be private or public key in PEM format.]:keyfile:"
  ":Signed data file to verify signature.:"
)


_shtab_espsecure() {
  local context state line curcontext="$curcontext"

  _arguments -C $_shtab_espsecure_options \
    ': :_shtab_espsecure_commands' \
    '*::: :->espsecure'

  case $state in
    espsecure)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_espsecure-$line[1]:"
      case $line[1] in
        decrypt_flash_data) _arguments -C $_shtab_espsecure_decrypt_flash_data_options ;;
        digest_private_key) _arguments -C $_shtab_espsecure_digest_private_key_options ;;
        digest_rsa_public_key) _arguments -C $_shtab_espsecure_digest_rsa_public_key_options ;;
        digest_sbv2_public_key) _arguments -C $_shtab_espsecure_digest_sbv2_public_key_options ;;
        digest_secure_bootloader) _arguments -C $_shtab_espsecure_digest_secure_bootloader_options ;;
        encrypt_flash_data) _arguments -C $_shtab_espsecure_encrypt_flash_data_options ;;
        extract_public_key) _arguments -C $_shtab_espsecure_extract_public_key_options ;;
        generate_flash_encryption_key) _arguments -C $_shtab_espsecure_generate_flash_encryption_key_options ;;
        generate_signing_key) _arguments -C $_shtab_espsecure_generate_signing_key_options ;;
        sign_data) _arguments -C $_shtab_espsecure_sign_data_options ;;
        signature_info_v2) _arguments -C $_shtab_espsecure_signature_info_v2_options ;;
        verify_signature) _arguments -C $_shtab_espsecure_verify_signature_options ;;
      esac
  esac
}



typeset -A opt_args
_shtab_espsecure "$@"
