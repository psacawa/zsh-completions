#compdef pre-commit

# AUTOMATCALLY GENERATED by `shtab`

_shtab_pre_commit_options_=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-s,--print-completion}"[print shell completion script]:print_completion:(bash zsh)"
  "(- :)"{-V,--version}"[show program\'s version number and exit]"
)

_shtab_pre_commit_commands_() {
  local _commands=(
    "autoupdate:"
    "clean:"
    "gc:"
    "help:"
    "hook-impl:"
    "init-templatedir:"
    "install:"
    "install-hooks:"
    "migrate-config:"
    "run:"
    "sample-config:"
    "try-repo:"
    "uninstall:"
  )

  _describe 'pre-commit commands' _commands
}

_shtab_pre_commit_autoupdate=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
  "--bleeding-edge[Update to the bleeding edge of \`master\` instead of the latest tagged version (the default behavior).]"
  "--freeze[Store \"frozen\" hashes in \`rev\` instead of tag names]"
  "*--repo[Only update this repository -- may be specified multiple times.]:repos:"
)

_shtab_pre_commit_clean=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
)

_shtab_pre_commit_gc=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
)

_shtab_pre_commit_help=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  ":Command to show help for.:"
)

_shtab_pre_commit_hook_impl=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
  "--hook-type[]:hook_type:"
  "--hook-dir[]:hook_dir:"
  "--skip-on-missing-config[]"
  ":rest:"
)

_shtab_pre_commit_init_templatedir=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
  "--no-allow-missing-config[Assume cloned repos should have a \`pre-commit\` config.]"
  {-t,--hook-type}"[]:hook_types:(pre-commit pre-merge-commit pre-push prepare-commit-msg commit-msg post-commit post-checkout)"
  ":The directory in which to write the hook script.:"
)

_shtab_pre_commit_install=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
  {-f,--overwrite}"[Overwrite existing hooks \/ remove migration mode.]"
  "--install-hooks[Whether to install hook environments for all environments in the config file.]"
  {-t,--hook-type}"[]:hook_types:(pre-commit pre-merge-commit pre-push prepare-commit-msg commit-msg post-commit post-checkout)"
  "--allow-missing-config[Whether to allow a missing \`pre-commit\` configuration file or exit with a failure code.]"
)

_shtab_pre_commit_install_hooks=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
)

_shtab_pre_commit_migrate_config=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
)

_shtab_pre_commit_run=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
  {--verbose,-v}"[]"
  {--all-files,-a}"[Run on all the files in the repo.]"
  "--files[Specific filenames to run hooks on.]:files:"
  "--show-diff-on-failure[When hooks fail, run \`git diff\` directly afterward.]"
  "--hook-stage[The stage during which the hook is fired.  One of \%(choices)s]:hook_stage:(commit merge-commit prepare-commit-msg commit-msg post-commit manual post-checkout push)"
  "--remote-branch[Remote branch ref used by \`git push\`.]:remote_branch:"
  {--from-ref,--source,-s}"[(for usage with \`--from-ref\`) -- this option represents the original ref in a \`from_ref...to_ref\` diff expression.  For \`pre-push\` hooks, this represents the branch you are pushing to.  For \`post-checkout\` hooks, this represents the branch that was previously checked out.]:from_ref:"
  {--to-ref,--origin,-o}"[(for usage with \`--to-ref\`) -- this option represents the destination ref in a \`from_ref...to_ref\` diff expression.  For \`pre-push\` hooks, this represents the branch being pushed.  For \`post-checkout\` hooks, this represents the branch that is now checked out.]:to_ref:"
  "--commit-msg-filename[Filename to check when running during \`commit-msg\`]:commit_msg_filename:"
  "--remote-name[Remote name used by \`git push\`.]:remote_name:"
  "--remote-url[Remote url used by \`git push\`.]:remote_url:"
  "--checkout-type[Indicates whether the checkout was a branch checkout (changing branches, flag\=1) or a file checkout (retrieving a file from the index, flag\=0).]:checkout_type:"
  ":A single hook-id to run:"
)

_shtab_pre_commit_sample_config=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
)

_shtab_pre_commit_try_repo=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
  {--ref,--rev}"[Manually select a rev to run against, otherwise the \`HEAD\` revision will be used.]:ref:"
  {--verbose,-v}"[]"
  {--all-files,-a}"[Run on all the files in the repo.]"
  "--files[Specific filenames to run hooks on.]:files:"
  "--show-diff-on-failure[When hooks fail, run \`git diff\` directly afterward.]"
  "--hook-stage[The stage during which the hook is fired.  One of \%(choices)s]:hook_stage:(commit merge-commit prepare-commit-msg commit-msg post-commit manual post-checkout push)"
  "--remote-branch[Remote branch ref used by \`git push\`.]:remote_branch:"
  {--from-ref,--source,-s}"[(for usage with \`--from-ref\`) -- this option represents the original ref in a \`from_ref...to_ref\` diff expression.  For \`pre-push\` hooks, this represents the branch you are pushing to.  For \`post-checkout\` hooks, this represents the branch that was previously checked out.]:from_ref:"
  {--to-ref,--origin,-o}"[(for usage with \`--to-ref\`) -- this option represents the destination ref in a \`from_ref...to_ref\` diff expression.  For \`pre-push\` hooks, this represents the branch being pushed.  For \`post-checkout\` hooks, this represents the branch that is now checked out.]:to_ref:"
  "--commit-msg-filename[Filename to check when running during \`commit-msg\`]:commit_msg_filename:"
  "--remote-name[Remote name used by \`git push\`.]:remote_name:"
  "--remote-url[Remote url used by \`git push\`.]:remote_url:"
  "--checkout-type[Indicates whether the checkout was a branch checkout (changing branches, flag\=1) or a file checkout (retrieving a file from the index, flag\=0).]:checkout_type:"
  ":Repository to source hooks from.:"
  ":A single hook-id to run:"
)

_shtab_pre_commit_uninstall=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--color[Whether to use color in output.  Defaults to \`\%(default)s\`.]:color:"
  {-c,--config}"[Path to alternate config file]:config:"
  {-t,--hook-type}"[]:hook_types:(pre-commit pre-merge-commit pre-push prepare-commit-msg commit-msg post-commit post-checkout)"
)

typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_pre_commit_options_ \
   \
  ': :_shtab_pre_commit_commands_' \
  '*::args:->args'

case $words[1] in
  autoupdate) _arguments $_shtab_pre_commit_autoupdate ;;
  clean) _arguments $_shtab_pre_commit_clean ;;
  gc) _arguments $_shtab_pre_commit_gc ;;
  help) _arguments $_shtab_pre_commit_help ;;
  hook-impl) _arguments $_shtab_pre_commit_hook_impl ;;
  init-templatedir) _arguments $_shtab_pre_commit_init_templatedir ;;
  install) _arguments $_shtab_pre_commit_install ;;
  install-hooks) _arguments $_shtab_pre_commit_install_hooks ;;
  migrate-config) _arguments $_shtab_pre_commit_migrate_config ;;
  run) _arguments $_shtab_pre_commit_run ;;
  sample-config) _arguments $_shtab_pre_commit_sample_config ;;
  try-repo) _arguments $_shtab_pre_commit_try_repo ;;
  uninstall) _arguments $_shtab_pre_commit_uninstall ;;
esac
