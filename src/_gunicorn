#compdef gunicorn

# AUTOMATCALLY GENERATED by `shtab`

_shtab_gunicorn_options_=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "(- :)"{-v,--version}"[show program\'s version number and exit]"
  {-c,--config}"[The Gunicorn config file. \[.\/gunicorn.conf.py\]]:config:"
  "*"{-b,--bind}"[The socket to bind. \[\[\'127.0.0.1\:8000\'\]\]]:bind:"
  "--backlog[The maximum number of pending connections. \[2048\]]:backlog:"
  {-w,--workers}"[The number of worker processes for handling requests. \[1\]]:workers:"
  {-k,--worker-class}"[The type of workers to use. \[sync\]]:worker_class:"
  "--threads[The number of worker threads for handling requests. \[1\]]:threads:"
  "--worker-connections[The maximum number of simultaneous clients. \[1000\]]:worker_connections:"
  "--max-requests[The maximum number of requests a worker will process before restarting. \[0\]]:max_requests:"
  "--max-requests-jitter[The maximum jitter to add to the \*max_requests\* setting. \[0\]]:max_requests_jitter:"
  {-t,--timeout}"[Workers silent for more than this many seconds are killed and restarted. \[30\]]:timeout:"
  "--graceful-timeout[Timeout for graceful workers restart. \[30\]]:graceful_timeout:"
  "--keep-alive[The number of seconds to wait for requests on a Keep-Alive connection. \[2\]]:keepalive:"
  "--limit-request-line[The maximum size of HTTP request line in bytes. \[4094\]]:limit_request_line:"
  "--limit-request-fields[Limit the number of HTTP headers fields in a request. \[100\]]:limit_request_fields:"
  "--limit-request-field_size[Limit the allowed size of an HTTP request header field. \[8190\]]:limit_request_field_size:"
  "--reload[Restart workers when code changes. \[False\]]"
  "--reload-engine[The implementation that should be used to power \:ref\:\`reload\`. \[auto\]]:reload_engine:"
  "*--reload-extra-file[Extends \:ref\:\`reload\` option to also watch and reload on additional files \[\[\]\]]:reload_extra_files:"
  "--spew[Install a trace function that spews every line executed by the server. \[False\]]"
  "--check-config[Check the configuration and exit. The exit status is 0 if the \[False\]]"
  "--print-config[Print the configuration settings as fully resolved. Implies \:ref\:\`check-config\`. \[False\]]"
  "--preload[Load application code before the worker processes are forked. \[False\]]"
  "--no-sendfile[Disables the use of \`\`sendfile()\`\`. \[None\]]"
  "--reuse-port[Set the \`\`SO_REUSEPORT\`\` flag on the listening socket. \[False\]]"
  "--chdir[Change directory to specified directory before loading apps. \[\/home\/psacawa\/Kody\/pypi\/gunicorn\]]:chdir:"
  {-D,--daemon}"[Daemonize the Gunicorn process. \[False\]]"
  "*"{-e,--env}"[Set environment variables in the execution environment. \[\[\]\]]:raw_env:"
  {-p,--pid}"[A filename to use for the PID file. \[None\]]:pidfile:"
  "--worker-tmp-dir[A directory to use for the worker heartbeat temporary file. \[None\]]:worker_tmp_dir:"
  {-u,--user}"[Switch worker processes to run as this user. \[1000\]]:user:"
  {-g,--group}"[Switch worker process to run as this group. \[1000\]]:group:"
  {-m,--umask}"[A bit mask for the file mode on files written by Gunicorn. \[0\]]:umask:"
  "--initgroups[If true, set the worker process\'s group access list with all of the \[False\]]"
  "--forwarded-allow-ips[Front-end\'s IPs from which allowed to handle set secure headers. \[127.0.0.1\]]:forwarded_allow_ips:"
  "--access-logfile[The Access log file to write to. \[None\]]:accesslog:"
  "--disable-redirect-access-to-syslog[Disable redirect access logs to syslog. \[False\]]"
  "--access-logformat[The access log format. \[\%\%(h)s \%\%(l)s \%\%(u)s \%\%(t)s \"\%\%(r)s\" \%\%(s)s \%\%(b)s \"\%\%(f)s\" \"\%\%(a)s\"\]]:access_log_format:"
  {--error-logfile,--log-file}"[The Error log file to write to. \[-\]]:errorlog:"
  "--log-level[The granularity of Error log outputs. \[info\]]:loglevel:"
  "--capture-output[Redirect stdout\/stderr to specified file in \:ref\:\`errorlog\`. \[False\]]"
  "--logger-class[The logger you want to use to log events in Gunicorn. \[gunicorn.glogging.Logger\]]:logger_class:"
  "--log-config[The log config file to use. \[None\]]:logconfig:"
  "--log-syslog-to[Address to send syslog messages. \[udp\:\/\/localhost\:514\]]:syslog_addr:"
  "--log-syslog[Send \*Gunicorn\* logs to syslog. \[False\]]"
  "--log-syslog-prefix[Makes Gunicorn use the parameter as program-name in the syslog entries. \[None\]]:syslog_prefix:"
  "--log-syslog-facility[Syslog facility name \[user\]]:syslog_facility:"
  {-R,--enable-stdio-inheritance}"[Enable stdio inheritance. \[False\]]"
  "--statsd-host[\`\`host\:port\`\` of the statsd server to log to. \[None\]]:statsd_host:"
  "--dogstatsd-tags[A comma-delimited list of datadog statsd (dogstatsd) tags to append to \[\]]:dogstatsd_tags:"
  "--statsd-prefix[Prefix to use when emitting statsd metrics (a trailing \`\`.\`\` is added, \[\]]:statsd_prefix:"
  {-n,--name}"[A base to use with setproctitle for process naming. \[None\]]:proc_name:"
  "--pythonpath[A comma-separated list of directories to add to the Python path. \[None\]]:pythonpath:"
  {--paste,--paster}"[Load a PasteDeploy config file. The argument may contain a \`\`\#\`\` \[None\]]:paste:"
  "--proxy-protocol[Enable detect PROXY protocol (PROXY mode). \[False\]]"
  "--proxy-allow-from[Front-end\'s IPs from which allowed accept proxy requests (comma separate). \[127.0.0.1\]]:proxy_allow_ips:"
  "--keyfile[SSL key file \[None\]]:keyfile:"
  "--certfile[SSL certificate file \[None\]]:certfile:"
  "--ssl-version[SSL version to use. \[_SSLMethod.PROTOCOL_TLS\]]:ssl_version:"
  "--cert-reqs[Whether client certificate is required (see stdlib ssl module\'s) \[VerifyMode.CERT_NONE\]]:cert_reqs:"
  "--ca-certs[CA certificates file \[None\]]:ca_certs:"
  "--suppress-ragged-eofs[Suppress ragged EOFs (see stdlib ssl module\'s) \[True\]]"
  "--do-handshake-on-connect[Whether to perform SSL handshake on socket connect (see stdlib ssl module\'s) \[False\]]"
  "--ciphers[SSL Cipher suite to use, in the format of an OpenSSL cipher list. \[None\]]:ciphers:"
  "*--paste-global[Set a PasteDeploy global config variable in \`\`key\=value\`\` form. \[\[\]\]]:raw_paste_global_conf:"
  "--strip-header-spaces[Strip spaces present between the header name and the the \`\`\:\`\`. \[False\]]"
)

_shtab_gunicorn_commands_() {
  local _commands=(
    
  )

  _describe 'gunicorn commands' _commands
}


typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_gunicorn_options_ \
   \
  ': :_shtab_gunicorn_commands_' \
  '*::args:->args'

case $words[1] in
  
esac
