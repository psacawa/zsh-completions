#compdef awslogs

# AUTOMATCALLY GENERATED by `shtab`

_shtab_awslogs_options_=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-s,--print-completion}"[print shell completion script]:print_completion:(bash zsh)"
  "(- :)--version[show program\'s version number and exit]"
)

_shtab_awslogs_commands_() {
  local _commands=(
    "get:Get logs"
    "groups:List groups"
    "streams:List streams"
  )

  _describe 'awslogs commands' _commands
}

_shtab_awslogs_get=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--aws-access-key-id[aws access key id]:aws_access_key_id:"
  "--aws-secret-access-key[aws secret access key]:aws_secret_access_key:"
  "--aws-session-token[aws session token]:aws_session_token:"
  "--profile[aws profile]:aws_profile:"
  "--aws-region[aws region]:aws_region:"
  "--aws-endpoint-url[aws endpoint url to services such localstack, fakes3, others]:aws_endpoint_url:"
  {-f,--filter-pattern}"[A valid CloudWatch Logs filter pattern to use for filtering the response. If not provided, all the events are matched.]:filter_pattern:"
  {-w,--watch}"[Query for new log lines constantly]"
  {-i,--watch-interval}"[Interval in seconds at which to query for new log lines]:watch_interval:"
  {-G,--no-group}"[Do not display group name]"
  {-S,--no-stream}"[Do not display stream name]"
  "--timestamp[Add creation timestamp to the output]"
  "--ingestion-time[Add ingestion time to the output]"
  {-s,--start}"[Start time (default \%(default)s)]:start:"
  {-e,--end}"[End time]:end:"
  "--color[When to color output. WHEN can be \'auto\' (default if omitted), \'never\', or \'always\'. With --color\=auto, output is colored only when standard output is connected to a terminal.]:color:(never always auto)"
  {-q,--query}"[JMESPath query to use in filtering the response data]:query:"
  ":log group name:"
  ":log stream name:"
)

_shtab_awslogs_groups=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--aws-access-key-id[aws access key id]:aws_access_key_id:"
  "--aws-secret-access-key[aws secret access key]:aws_secret_access_key:"
  "--aws-session-token[aws session token]:aws_session_token:"
  "--profile[aws profile]:aws_profile:"
  "--aws-region[aws region]:aws_region:"
  "--aws-endpoint-url[aws endpoint url to services such localstack, fakes3, others]:aws_endpoint_url:"
  {-p,--log-group-prefix}"[List only groups matching the prefix]:log_group_prefix:"
)

_shtab_awslogs_streams=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--aws-access-key-id[aws access key id]:aws_access_key_id:"
  "--aws-secret-access-key[aws secret access key]:aws_secret_access_key:"
  "--aws-session-token[aws session token]:aws_session_token:"
  "--profile[aws profile]:aws_profile:"
  "--aws-region[aws region]:aws_region:"
  "--aws-endpoint-url[aws endpoint url to services such localstack, fakes3, others]:aws_endpoint_url:"
  {-s,--start}"[Start time (default \%(default)s)]:start:"
  {-e,--end}"[End time]:end:"
  ":log group name:"
)

typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_awslogs_options_ \
   \
  ': :_shtab_awslogs_commands_' \
  '*::args:->args'

case $words[1] in
  get) _arguments $_shtab_awslogs_get ;;
  groups) _arguments $_shtab_awslogs_groups ;;
  streams) _arguments $_shtab_awslogs_streams ;;
esac
