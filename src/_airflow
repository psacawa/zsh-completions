#compdef airflow

# AUTOMATCALLY GENERATED by `shtab`

_shtab_airflow_options_=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_airflow_commands_() {
  local _commands=(
    "celery:Start celery components. Works only when using CeleryExecutor. For more information, see https\:\/\/airflow.apache.org\/docs\/apache-airflow\/stable\/executor\/celery.html"
    "cheat-sheet:Display cheat sheet"
    "config:View configuration"
    "connections:Manage connections"
    "dags:Manage DAGs"
    "db:Database operations"
    "info:Show information about current Airflow and environment"
    "jobs:Manage jobs"
    "kerberos:Start a kerberos ticket renewer"
    "kubernetes:Tools to help run the KubernetesExecutor"
    "plugins:Dump information about loaded plugins"
    "pools:Manage pools"
    "providers:Display providers"
    "roles:Manage roles"
    "rotate-fernet-key:Rotate all encrypted connection credentials and variables\; see https\:\/\/airflow.apache.org\/docs\/apache-airflow\/stable\/howto\/secure-connections.html\#rotating-encryption-keys"
    "scheduler:Start a scheduler instance"
    "standalone:Run an all-in-one copy of Airflow"
    "sync-perm:Update permissions for existing roles and optionally DAGs"
    "tasks:Manage tasks"
    "triggerer:Start a triggerer instance"
    "users:Manage users"
    "variables:Manage variables"
    "version:Show the version"
    "webserver:Start a Airflow webserver instance"
  )

  _describe 'airflow commands' _commands
}

_shtab_airflow_celery=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(flower stop worker)"
)

_shtab_airflow_cheat_sheet=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-v,--verbose}"[Make logging output more verbose]"
)

_shtab_airflow_config=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(get-value list)"
)

_shtab_airflow_connections=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(add delete export get import list)"
)

_shtab_airflow_dags=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(backfill delete list list-jobs list-runs next-execution pause report show state test trigger unpause)"
)

_shtab_airflow_db=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(check check-migrations init reset shell upgrade)"
)

_shtab_airflow_info=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--anonymize[Minimize any personal identifiable information. Use it when sharing output with others.]"
  "--file-io[Send output to file.io service and returns link.]"
  {-o,--output}"[Output format. Allowed values\: json, yaml, plain, table (default\: table)]:output:(table json yaml plain)"
  {-v,--verbose}"[Make logging output more verbose]"
)

_shtab_airflow_jobs=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(check)"
)

_shtab_airflow_kerberos=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-D,--daemon}"[Daemonize instead of running in the foreground]"
  {-k,--keytab}"[keytab]:keytab:"
  {-l,--log-file}"[Location of the log file]:log_file:"
  "--pid[PID file location]:pid:"
  "--stderr[Redirect stderr to this file]:stderr:"
  "--stdout[Redirect stdout to this file]:stdout:"
  ":kerberos principal:"
)

_shtab_airflow_kubernetes=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(cleanup-pods generate-dag-yaml)"
)

_shtab_airflow_plugins=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-o,--output}"[Output format. Allowed values\: json, yaml, plain, table (default\: table)]:output:(table json yaml plain)"
  {-v,--verbose}"[Make logging output more verbose]"
)

_shtab_airflow_pools=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(delete export get import list set)"
)

_shtab_airflow_providers=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(auth behaviours get hooks links list logging secrets widgets)"
)

_shtab_airflow_roles=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(create list)"
)

_shtab_airflow_rotate_fernet_key=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_airflow_scheduler=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-D,--daemon}"[Daemonize instead of running in the foreground]"
  {-p,--do-pickle}"[Attempt to pickle the DAG object to send over to the workers, instead of letting workers run their version of the code]"
  {-l,--log-file}"[Location of the log file]:log_file:"
  {-n,--num-runs}"[Set the number of runs to execute before exiting]:num_runs:"
  "--pid[PID file location]:pid:"
  {-s,--skip-serve-logs}"[Don\'t start the serve logs process along with the workers]"
  "--stderr[Redirect stderr to this file]:stderr:"
  "--stdout[Redirect stdout to this file]:stdout:"
  {-S,--subdir}"[File location or directory from which to look for the dag. Defaults to \'\[AIRFLOW_HOME\]\/dags\' where \[AIRFLOW_HOME\] is the value you set for \'AIRFLOW_HOME\' config you set in \'airflow.cfg\' ]:subdir:"
)

_shtab_airflow_standalone=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_airflow_sync_perm=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--include-dags[If passed, DAG specific permissions will also be synced.]"
)

_shtab_airflow_tasks=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(clear failed-deps list render run state states-for-dag-run test)"
)

_shtab_airflow_triggerer=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--capacity[The maximum number of triggers that a Triggerer will run at one time.]:capacity:"
  {-D,--daemon}"[Daemonize instead of running in the foreground]"
  {-l,--log-file}"[Location of the log file]:log_file:"
  "--pid[PID file location]:pid:"
  "--stderr[Redirect stderr to this file]:stderr:"
  "--stdout[Redirect stdout to this file]:stdout:"
)

_shtab_airflow_users=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(add-role create delete export import list remove-role)"
)

_shtab_airflow_variables=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "1:Sub command:(delete export get import list set)"
)

_shtab_airflow_version=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_airflow_webserver=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-A,--access-logfile}"[The logfile to store the webserver access log. Use \'-\' to print to stderr]:access_logfile:"
  {-L,--access-logformat}"[The access log format for gunicorn logs]:access_logformat:"
  {-D,--daemon}"[Daemonize instead of running in the foreground]"
  {-d,--debug}"[Use the server that ships with Flask in debug mode]"
  {-E,--error-logfile}"[The logfile to store the webserver error log. Use \'-\' to print to stderr]:error_logfile:"
  {-H,--hostname}"[Set the hostname on which to run the web server]:hostname:"
  {-l,--log-file}"[Location of the log file]:log_file:"
  "--pid[PID file location]:pid:"
  {-p,--port}"[The port on which to run the server]:port:"
  "--ssl-cert[Path to the SSL certificate for the webserver]:ssl_cert:"
  "--ssl-key[Path to the key to use with the SSL certificate]:ssl_key:"
  "--stderr[Redirect stderr to this file]:stderr:"
  "--stdout[Redirect stdout to this file]:stdout:"
  {-t,--worker-timeout}"[The timeout for waiting on webserver workers]:worker_timeout:"
  {-k,--workerclass}"[The worker class to use for Gunicorn]:workerclass:(sync eventlet gevent tornado)"
  {-w,--workers}"[Number of workers to run the webserver on]:workers:"
)

typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_airflow_options_ \
   \
  ': :_shtab_airflow_commands_' \
  '*::args:->args'

case $words[1] in
  celery) _arguments $_shtab_airflow_celery ;;
  cheat-sheet) _arguments $_shtab_airflow_cheat_sheet ;;
  config) _arguments $_shtab_airflow_config ;;
  connections) _arguments $_shtab_airflow_connections ;;
  dags) _arguments $_shtab_airflow_dags ;;
  db) _arguments $_shtab_airflow_db ;;
  info) _arguments $_shtab_airflow_info ;;
  jobs) _arguments $_shtab_airflow_jobs ;;
  kerberos) _arguments $_shtab_airflow_kerberos ;;
  kubernetes) _arguments $_shtab_airflow_kubernetes ;;
  plugins) _arguments $_shtab_airflow_plugins ;;
  pools) _arguments $_shtab_airflow_pools ;;
  providers) _arguments $_shtab_airflow_providers ;;
  roles) _arguments $_shtab_airflow_roles ;;
  rotate-fernet-key) _arguments $_shtab_airflow_rotate_fernet_key ;;
  scheduler) _arguments $_shtab_airflow_scheduler ;;
  standalone) _arguments $_shtab_airflow_standalone ;;
  sync-perm) _arguments $_shtab_airflow_sync_perm ;;
  tasks) _arguments $_shtab_airflow_tasks ;;
  triggerer) _arguments $_shtab_airflow_triggerer ;;
  users) _arguments $_shtab_airflow_users ;;
  variables) _arguments $_shtab_airflow_variables ;;
  version) _arguments $_shtab_airflow_version ;;
  webserver) _arguments $_shtab_airflow_webserver ;;
esac
