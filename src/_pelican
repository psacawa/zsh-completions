#compdef pelican

# AUTOMATICALLY GENERATED by `shtab`


_shtab_pelican_commands() {
  local _commands=(
    
  )
  _describe 'shtab commands' _commands
}

_shtab_pelican_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-t,--theme-path}"[Path where to find the theme templates. If not specified, it will use the default one included with pelican.]:theme:"
  {-o,--output}"[Where to output the generated files. If not specified, a directory will be created, named \"output\" in the current path.]:output:"
  {-s,--settings}"[The settings of the application, this is automatically set to pelicanconf.py if a file exists with this name.]:settings:"
  {-d,--delete-output-directory}"[Delete the output directory.]"
  {-v,--verbose}"[Show all messages.]"
  {-q,--quiet}"[Show only critical errors.]"
  {-D,--debug}"[Show all messages, including debug messages.]"
  "(- : *)--version[Print the pelican version and exit.]"
  {-r,--autoreload}"[Relaunch pelican each time a modification occurs on the content files.]"
  "--print-settings[Print current configuration settings and exit. Append one or more setting name arguments to see the values for specific settings only.]:print_settings:"
  "--relative-urls[Use relative urls in output, useful for site development]"
  "--cache-path[Directory in which to store cache files. If not specified, defaults to \"cache\".]:cache_path:"
  "--ignore-cache[Ignore content cache from previous runs by not loading cache files.]"
  {-w,--write-selected}"[Comma separated list of selected paths to write]:selected_paths:"
  "--fatal[Exit the program with non-zero status if any errors\/warnings encountered.]:fatal:(errors warnings)"
  "--logs-dedup-min-level[Only enable log de-duplication for levels equal to or above the specified value]:logs_dedup_min_level:(DEBUG INFO WARNING ERROR)"
  {-l,--listen}"[Serve content files via HTTP and port 8000.]"
  {-p,--port}"[Port to serve HTTP files at. (default\: 8000)]:port:"
  {-b,--bind}"[IP to bind to when serving files via HTTP (default\: 127.0.0.1)]:bind:"
  {-e,--extra-settings}"[Specify one or more SETTING\=VALUE pairs to override settings. VALUE must be in JSON notation\: specify string values as SETTING\=\'\"some string\"\'\; booleans as SETTING\=true or SETTING\=false\; None as SETTING\=null.]:overrides:"
  ":Path where to find the content files.:"
)


_shtab_pelican() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_pelican_options[(I)${(q)one_or_more}*]} + ${_shtab_pelican_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_pelican_options+=(': :_shtab_pelican_commands' '*::: :->shtab')
  fi
  _arguments -C $_shtab_pelican_options

  case $state in
    shtab)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_pelican-$line[1]:"
      case $line[1] in
        
      esac
  esac
}



typeset -A opt_args
_shtab_pelican "$@"
