#compdef yq

# AUTOMATCALLY GENERATED by `shtab`

_shtab_yq_options_=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {--yaml-output,--yml-output,-y}"[Transcode jq JSON output back into YAML and emit it]"
  {--yaml-roundtrip,--yml-roundtrip,-Y}"[Transcode jq JSON output back into YAML and emit it. Preserve YAML tags and styles by representing them as extra items in their enclosing mappings and sequences while in JSON. This option is incompatible with jq filters that do not expect these extra items.]"
  {--width,-w}"[When using --yaml-output, specify string wrap width]:width:"
  {--indentless-lists,--indentless}"[When using --yaml-output, indent block style lists (sequences) with 0 spaces instead of 2]"
  {--in-place,-i}"[Edit files in place (no backup - use caution)]"
  "(- :)--version[show program\'s version number and exit]"
)

_shtab_yq_commands_() {
  local _commands=(
    
  )

  _describe 'yq commands' _commands
}


typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_yq_options_ \
  ":jq_filter:" \
  "(*)::input_streams:" \
  ': :_shtab_yq_commands_' \
  '*::args:->args'

case $words[1] in
  
esac
