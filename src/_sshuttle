#compdef sshuttle

# AUTOMATCALLY GENERATED by `shtab`

_shtab_sshuttle_options_=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-l,--listen}"[
    transproxy to this ip address and port number
    ]:listen:"
  {-H,--auto-hosts}"[
    continuously scan for remote hostnames and update local \/etc\/hosts as
    they are found
    ]"
  {-N,--auto-nets}"[
    automatically determine subnets to route
    ]"
  "--dns[
    capture local DNS requests and forward to the remote DNS server
    ]"
  "--ns-hosts[
    capture and forward DNS requests made to the following servers
    ]:ns_hosts:"
  "--to-ns[
    the DNS server to forward requests to\; defaults to servers in
    \/etc\/resolv.conf on remote side if not given.
    ]:to_ns:"
  "--method[
    \%(choices)s
    ]:method:(auto nat nft tproxy pf ipfw)"
  "--python[
    path to python interpreter on the remote server
    ]:python:"
  {-r,--remote}"[
    ssh hostname (and optional username and password) of remote \%(prog)s server
    ]:remote:_hosts"
  "*"{-x,--exclude}"[
    exclude this subnet (can be used more than once)
    ]:exclude:"
  {-X,--exclude-from}"[
    exclude the subnets in a file (whitespace separated)
    ]:exclude:"
  "*"{-v,--verbose}"[
    increase debug message verbosity
    ]"
  "(- :)"{-V,--version}"[
    print the \%(prog)s version number and exit
    ]"
  {-e,--ssh-cmd}"[
    the command to use to connect to the remote \[\%(default)s\]
    ]:ssh_cmd:"
  "--seed-hosts[
    comma-separated list of hostnames for initial scan (may be used with
    or without --auto-hosts)
    ]:seed_hosts:"
  "--no-latency-control[
    sacrifice latency to improve bandwidth benchmarks
    ]"
  "--latency-buffer-size[
    size of latency control buffer
    ]:latency_buffer_size:"
  "--wrap[
    restart counting channel numbers after this number (for testing)
    ]:wrap:"
  "--disable-ipv6[
    disable IPv6 support
    ]"
  {-D,--daemon}"[
    run in the background as a daemon
    ]"
  {-s,--subnets}"[
    file where the subnets are stored, instead of on the command line
    ]:subnets_file:"
  "--syslog[
    send log messages to syslog (default if you use --daemon)
    ]"
  "--pidfile[
    pidfile name (only if using --daemon) \[\%(default)s\]
    ]:pidfile:"
  "--user[
    apply all the rules only to this linux user
    ]:user:"
  "--firewall[
    (internal use only)
    ]"
  "--ttl[
    Override the TTL for the connections made by the sshuttle server.
    Default is 63.
    ]:ttl:"
  "--hostwatch[
    (internal use only)
    ]"
  "--sudoers[
    Add sshuttle to the sudoers for this user
    ]"
  "--sudoers-no-modify[
    Prints the sudoers config to STDOUT and DOES NOT modify anything.
    ]"
  "--sudoers-user[
    Set the user name or group with \%\%group_name for passwordless operation.
    Default is the current user.set ALL for all users. Only works with
    --sudoers or --sudoers-no-modify option.
    ]:sudoers_user:"
  "--sudoers-filename[
    Set the file name for the sudoers.d file to be added. Default is
    \"sshuttle_auto\". Only works with --sudoers or --sudoers-no-modify option.
    ]:sudoers_filename:"
  "--no-sudo-pythonpath[
    do not set PYTHONPATH when invoking sudo
    ]"
  {-t,--tmark}"[
    transproxy optional traffic mark with provided MARK value
    ]:tmark:"
)

_shtab_sshuttle_commands_() {
  local _commands=(
    
  )

  _describe 'sshuttle commands' _commands
}


typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_sshuttle_options_ \
  "(*)::capture and forward traffic to these subnets (whitespace separated):" \
  ': :_shtab_sshuttle_commands_' \
  '*::args:->args'

case $words[1] in
  
esac
