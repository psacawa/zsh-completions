#compdef dmypy

# AUTOMATCALLY GENERATED by `shtab`

_shtab_mypy_options_=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--status-file[status file to retrieve daemon details]:status_file:"
  "(- :)"{-V,--version}"[Show program\'s version number and exit]"
)

_shtab_mypy_commands_() {
  local _commands=(
    "check:"
    "daemon:"
    "hang:"
    "help:"
    "kill:"
    "recheck:"
    "restart:"
    "run:"
    "start:"
    "status:"
    "stop:"
    "suggest:"
  )

  _describe 'dmypy commands' _commands
}

_shtab_mypy_check=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-v,--verbose}"[Print detailed status]"
  "--junit-xml[Write junit.xml to the given file]:junit_xml:"
  "--perf-stats-file[write performance information to the given file]:perf_stats_file:"
  "(*):File (or directory) to check:"
)

_shtab_mypy_daemon=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--timeout[Server shutdown timeout (in seconds)]:timeout:"
  "(*)::Regular mypy flags (precede with --):"
)

_shtab_mypy_hang=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_mypy_help=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_mypy_kill=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_mypy_recheck=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-v,--verbose}"[Print detailed status]"
  "--junit-xml[Write junit.xml to the given file]:junit_xml:"
  "--perf-stats-file[write performance information to the given file]:perf_stats_file:"
  "--update[Files in the run to add or check again (default\: all from previous run)]:update:"
  "--remove[Files to remove from the run]:remove:"
)

_shtab_mypy_restart=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--log-file[Direct daemon stdout\/stderr to FILE]:log_file:"
  "--timeout[Server shutdown timeout (in seconds)]:timeout:"
  "(*)::Regular mypy flags (precede with --):"
)

_shtab_mypy_run=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-v,--verbose}"[Print detailed status]"
  "--junit-xml[Write junit.xml to the given file]:junit_xml:"
  "--perf-stats-file[write performance information to the given file]:perf_stats_file:"
  "--timeout[Server shutdown timeout (in seconds)]:timeout:"
  "--log-file[Direct daemon stdout\/stderr to FILE]:log_file:"
  "(*)::Regular mypy flags and files (precede with --):"
)

_shtab_mypy_start=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--log-file[Direct daemon stdout\/stderr to FILE]:log_file:"
  "--timeout[Server shutdown timeout (in seconds)]:timeout:"
  "(*)::Regular mypy flags (precede with --):"
)

_shtab_mypy_status=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  {-v,--verbose}"[Print detailed status]"
  "--fswatcher-dump-file[Collect information about the current file state]:fswatcher_dump_file:"
)

_shtab_mypy_stop=(
  "(- :)"{-h,--help}"[show this help message and exit]"
)

_shtab_mypy_suggest=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--json[Produce json that pyannotate can use to apply a suggestion]"
  "--no-errors[Only produce suggestions that cause no errors]"
  "--no-any[Only produce suggestions that don\'t contain Any]"
  "--flex-any[Allow anys in types if they go above a certain score (scores are from 0-1)]:flex_any:"
  "--try-text[Try using unicode wherever str is inferred]"
  "--callsites[Find callsites instead of suggesting a type]"
  "--use-fixme[A dummy name to use instead of Any for types that can\'t be inferred]:use_fixme:"
  "--max-guesses[Set the maximum number of types to try for a function (default 64)]:max_guesses:"
  ":Function specified as \'\[package.\]module.\[class.\]function\':"
)

typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_mypy_options_ \
   \
  ': :_shtab_mypy_commands_' \
  '*::args:->args'

case $words[1] in
  check) _arguments $_shtab_mypy_check ;;
  daemon) _arguments $_shtab_mypy_daemon ;;
  hang) _arguments $_shtab_mypy_hang ;;
  help) _arguments $_shtab_mypy_help ;;
  kill) _arguments $_shtab_mypy_kill ;;
  recheck) _arguments $_shtab_mypy_recheck ;;
  restart) _arguments $_shtab_mypy_restart ;;
  run) _arguments $_shtab_mypy_run ;;
  start) _arguments $_shtab_mypy_start ;;
  status) _arguments $_shtab_mypy_status ;;
  stop) _arguments $_shtab_mypy_stop ;;
  suggest) _arguments $_shtab_mypy_suggest ;;
esac
